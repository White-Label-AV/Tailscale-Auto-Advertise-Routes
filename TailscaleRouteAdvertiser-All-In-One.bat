@echo off
echo Tailscale Route Advertiser (All-In-One)
echo =====================================
echo.
echo This batch file will extract and run the Tailscale Route Advertiser script.
echo.

:: Check if running as administrator
>nul 2>&1 "%SYSTEMROOT%\system32\cacls.exe" "%SYSTEMROOT%\system32\config\system"

:: If not running as administrator, restart with admin privileges
if %errorlevel% neq 0 (
    echo Requesting administrator privileges...
    echo.
    powershell -Command "Start-Process -FilePath '%~f0' -Verb RunAs"
    exit /b
)

:: If we get here, we're running as administrator
echo Running with administrator privileges.
echo.

:: Create a temporary directory for the script
set "TEMP_DIR=%TEMP%\TailscaleRouteAdvertiser"
mkdir "%TEMP_DIR%" 2>nul

:: Create the PowerShell script
echo Creating temporary script file...
set "PS_SCRIPT=%TEMP_DIR%\TailscaleRouteAdvertiser.ps1"

echo ^<#> > "%PS_SCRIPT%"
echo .SYNOPSIS >> "%PS_SCRIPT%"
echo     Tailscale Route Advertiser >> "%PS_SCRIPT%"
echo .DESCRIPTION >> "%PS_SCRIPT%"
echo     This script identifies all currently connected physical ethernet or wifi connections, >> "%PS_SCRIPT%"
echo     allows the user to select one, and then connects to a tailscale tailnet advertising that route. >> "%PS_SCRIPT%"
echo .NOTES >> "%PS_SCRIPT%"
echo     Requires Tailscale to be installed on the system. >> "%PS_SCRIPT%"
echo     Run with administrator privileges. >> "%PS_SCRIPT%"
echo ^#^> >> "%PS_SCRIPT%"
echo. >> "%PS_SCRIPT%"
echo # Check if running as administrator >> "%PS_SCRIPT%"
echo $currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent^(^)^) >> "%PS_SCRIPT%"
echo $isAdmin = $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator^) >> "%PS_SCRIPT%"
echo. >> "%PS_SCRIPT%"
echo if (-not $isAdmin^) { >> "%PS_SCRIPT%"
echo     Write-Host "This script requires administrator privileges. Please run as administrator." -ForegroundColor Red >> "%PS_SCRIPT%"
echo     Write-Host "Right-click the script and select 'Run with PowerShell as administrator'." -ForegroundColor Yellow >> "%PS_SCRIPT%"
echo     Start-Sleep -Seconds 3 >> "%PS_SCRIPT%"
echo     exit >> "%PS_SCRIPT%"
echo } >> "%PS_SCRIPT%"
echo. >> "%PS_SCRIPT%"
echo # Check if Tailscale is installed >> "%PS_SCRIPT%"
echo try { >> "%PS_SCRIPT%"
echo     $tailscaleVersion = tailscale version >> "%PS_SCRIPT%"
echo     Write-Host "Tailscale detected: $tailscaleVersion" -ForegroundColor Green >> "%PS_SCRIPT%"
echo } >> "%PS_SCRIPT%"
echo catch { >> "%PS_SCRIPT%"
echo     Write-Host "Tailscale is not installed or not in PATH. Please install Tailscale first." -ForegroundColor Red >> "%PS_SCRIPT%"
echo     Write-Host "Download from: https://tailscale.com/download" -ForegroundColor Yellow >> "%PS_SCRIPT%"
echo     Start-Sleep -Seconds 3 >> "%PS_SCRIPT%"
echo     exit >> "%PS_SCRIPT%"
echo } >> "%PS_SCRIPT%"
echo. >> "%PS_SCRIPT%"
echo # Get network connections (only physical Ethernet and WiFi^) >> "%PS_SCRIPT%"
echo function Get-PhysicalNetworkConnections { >> "%PS_SCRIPT%"
echo     $connections = @(^) >> "%PS_SCRIPT%"
echo     >> "%PS_SCRIPT%"
echo     # Get all network adapters that are physical (Ethernet or WiFi^) and connected >> "%PS_SCRIPT%"
echo     $adapters = Get-NetAdapter ^| Where-Object { >> "%PS_SCRIPT%"
echo         ($_.MediaType -eq "802.3" -or $_.MediaType -eq "Native 802.11"^) -and  >> "%PS_SCRIPT%"
echo         $_.Status -eq "Up" >> "%PS_SCRIPT%"
echo     } >> "%PS_SCRIPT%"
echo     >> "%PS_SCRIPT%"
echo     foreach ($adapter in $adapters^) { >> "%PS_SCRIPT%"
echo         # Get IP configuration for this adapter >> "%PS_SCRIPT%"
echo         $ipConfig = Get-NetIPConfiguration -InterfaceIndex $adapter.ifIndex >> "%PS_SCRIPT%"
echo         >> "%PS_SCRIPT%"
echo         # Only include adapters with IPv4 addresses >> "%PS_SCRIPT%"
echo         if ($ipConfig.IPv4Address^) { >> "%PS_SCRIPT%"
echo             $ipv4Address = $ipConfig.IPv4Address.IPAddress >> "%PS_SCRIPT%"
echo             $ipv4Subnet = $ipConfig.IPv4Address.PrefixLength >> "%PS_SCRIPT%"
echo             >> "%PS_SCRIPT%"
echo             # Calculate the network address (for proper subnet format^) >> "%PS_SCRIPT%"
echo             $ipBytes = $ipv4Address.Split('.'^^) ^| ForEach-Object { [byte]$_ } >> "%PS_SCRIPT%"
echo             $maskBytes = @(^) >> "%PS_SCRIPT%"
echo             $bitsLeft = $ipv4Subnet >> "%PS_SCRIPT%"
echo             >> "%PS_SCRIPT%"
echo             # Convert prefix length to subnet mask bytes >> "%PS_SCRIPT%"
echo             for ($i = 0; $i -lt 4; $i++^) { >> "%PS_SCRIPT%"
echo                 if ($bitsLeft -ge 8^) { >> "%PS_SCRIPT%"
echo                     $maskBytes += 255 >> "%PS_SCRIPT%"
echo                     $bitsLeft -= 8 >> "%PS_SCRIPT%"
echo                 } elseif ($bitsLeft -gt 0^) { >> "%PS_SCRIPT%"
echo                     $maskBytes += (256 - [Math]::Pow(2, (8 - $bitsLeft^)^)^) >> "%PS_SCRIPT%"
echo                     $bitsLeft = 0 >> "%PS_SCRIPT%"
echo                 } else { >> "%PS_SCRIPT%"
echo                     $maskBytes += 0 >> "%PS_SCRIPT%"
echo                 } >> "%PS_SCRIPT%"
echo             } >> "%PS_SCRIPT%"
echo             >> "%PS_SCRIPT%"
echo             # Apply mask to get network address >> "%PS_SCRIPT%"
echo             $networkBytes = @(^) >> "%PS_SCRIPT%"
echo             for ($i = 0; $i -lt 4; $i++^) { >> "%PS_SCRIPT%"
echo                 $networkBytes += ($ipBytes[$i] -band $maskBytes[$i]^) >> "%PS_SCRIPT%"
echo             } >> "%PS_SCRIPT%"
echo             >> "%PS_SCRIPT%"
echo             $networkAddress = $networkBytes -join '.' >> "%PS_SCRIPT%"
echo             $subnet = "$networkAddress/$ipv4Subnet" >> "%PS_SCRIPT%"
echo             >> "%PS_SCRIPT%"
echo             # Also store the host address for display purposes >> "%PS_SCRIPT%"
echo             $hostSubnet = "$ipv4Address/$ipv4Subnet" >> "%PS_SCRIPT%"
echo             >> "%PS_SCRIPT%"
echo             # Get gateway if available >> "%PS_SCRIPT%"
echo             $gateway = "N/A" >> "%PS_SCRIPT%"
echo             if ($ipConfig.IPv4DefaultGateway^) { >> "%PS_SCRIPT%"
echo                 $gateway = $ipConfig.IPv4DefaultGateway.NextHop >> "%PS_SCRIPT%"
echo             } >> "%PS_SCRIPT%"
echo             >> "%PS_SCRIPT%"
echo             # Determine connection type >> "%PS_SCRIPT%"
echo             $connectionType = "WiFi" >> "%PS_SCRIPT%"
echo             if ($adapter.MediaType -eq "802.3"^) { >> "%PS_SCRIPT%"
echo                 $connectionType = "Ethernet" >> "%PS_SCRIPT%"
echo             } >> "%PS_SCRIPT%"
echo             >> "%PS_SCRIPT%"
echo             # Create custom object with connection details >> "%PS_SCRIPT%"
echo             $connectionInfo = [PSCustomObject]@{ >> "%PS_SCRIPT%"
echo                 Name = $adapter.Name >> "%PS_SCRIPT%"
echo                 InterfaceDescription = $adapter.InterfaceDescription >> "%PS_SCRIPT%"
echo                 Type = $connectionType >> "%PS_SCRIPT%"
echo                 Status = $adapter.Status >> "%PS_SCRIPT%"
echo                 IPAddress = $ipv4Address >> "%PS_SCRIPT%"
echo                 Subnet = $subnet >> "%PS_SCRIPT%"
echo                 Gateway = $gateway >> "%PS_SCRIPT%"
echo                 InterfaceIndex = $adapter.ifIndex >> "%PS_SCRIPT%"
echo             } >> "%PS_SCRIPT%"
echo             >> "%PS_SCRIPT%"
echo             $connections += $connectionInfo >> "%PS_SCRIPT%"
echo         } >> "%PS_SCRIPT%"
echo     } >> "%PS_SCRIPT%"
echo     >> "%PS_SCRIPT%"
echo     return $connections >> "%PS_SCRIPT%"
echo } >> "%PS_SCRIPT%"
echo. >> "%PS_SCRIPT%"
echo # Clear the console and show header >> "%PS_SCRIPT%"
echo Clear-Host >> "%PS_SCRIPT%"
echo Write-Host "=== Tailscale Route Advertiser ===" -ForegroundColor Cyan >> "%PS_SCRIPT%"
echo Write-Host "This script will help you advertise a network route to your Tailscale tailnet." >> "%PS_SCRIPT%"
echo Write-Host "This makes the selected network accessible to other devices in your tailnet." >> "%PS_SCRIPT%"
echo Write-Host "" >> "%PS_SCRIPT%"
echo. >> "%PS_SCRIPT%"
echo # Get the network connections >> "%PS_SCRIPT%"
echo $networkConnections = Get-PhysicalNetworkConnections >> "%PS_SCRIPT%"
echo. >> "%PS_SCRIPT%"
echo if ($networkConnections.Count -eq 0^) { >> "%PS_SCRIPT%"
echo     Write-Host "No active physical network connections found." -ForegroundColor Red >> "%PS_SCRIPT%"
echo     Start-Sleep -Seconds 3 >> "%PS_SCRIPT%"
echo     exit >> "%PS_SCRIPT%"
echo } >> "%PS_SCRIPT%"
echo. >> "%PS_SCRIPT%"
echo # Display available connections >> "%PS_SCRIPT%"
echo Write-Host "Available Network Connections:" -ForegroundColor Green >> "%PS_SCRIPT%"
echo Write-Host "-----------------------------" >> "%PS_SCRIPT%"
echo for ($i = 0; $i -lt $networkConnections.Count; $i++^) { >> "%PS_SCRIPT%"
echo     $conn = $networkConnections[$i] >> "%PS_SCRIPT%"
echo     Write-Host "[$($i+1)] $($conn.Name^) ($($conn.Type^)^)" -ForegroundColor Yellow >> "%PS_SCRIPT%"
echo     Write-Host "    IP Address: $($conn.IPAddress^)" >> "%PS_SCRIPT%"
echo     Write-Host "    Network: $($conn.Subnet^)" >> "%PS_SCRIPT%"
echo     Write-Host "    Gateway: $($conn.Gateway^)" >> "%PS_SCRIPT%"
echo     Write-Host "    Description: $($conn.InterfaceDescription^)" >> "%PS_SCRIPT%"
echo     Write-Host "" >> "%PS_SCRIPT%"
echo } >> "%PS_SCRIPT%"
echo. >> "%PS_SCRIPT%"
echo # Get user selection >> "%PS_SCRIPT%"
echo $validSelection = $false >> "%PS_SCRIPT%"
echo $selectedIndex = -1 >> "%PS_SCRIPT%"
echo. >> "%PS_SCRIPT%"
echo while (-not $validSelection^) { >> "%PS_SCRIPT%"
echo     $selection = Read-Host "Enter the number of the connection you want to advertise [1-$($networkConnections.Count^)]" >> "%PS_SCRIPT%"
echo     >> "%PS_SCRIPT%"
echo     if ($selection -match '^\d+$'^) { >> "%PS_SCRIPT%"
echo         $selectedIndex = [int]$selection - 1 >> "%PS_SCRIPT%"
echo         >> "%PS_SCRIPT%"
echo         if ($selectedIndex -ge 0 -and $selectedIndex -lt $networkConnections.Count^) { >> "%PS_SCRIPT%"
echo             $validSelection = $true >> "%PS_SCRIPT%"
echo         } >> "%PS_SCRIPT%"
echo         else { >> "%PS_SCRIPT%"
echo             Write-Host "Invalid selection. Please enter a number between 1 and $($networkConnections.Count^)." -ForegroundColor Red >> "%PS_SCRIPT%"
echo         } >> "%PS_SCRIPT%"
echo     } >> "%PS_SCRIPT%"
echo     else { >> "%PS_SCRIPT%"
echo         Write-Host "Invalid input. Please enter a number." -ForegroundColor Red >> "%PS_SCRIPT%"
echo     } >> "%PS_SCRIPT%"
echo } >> "%PS_SCRIPT%"
echo. >> "%PS_SCRIPT%"
echo $selectedConnection = $networkConnections[$selectedIndex] >> "%PS_SCRIPT%"
echo Write-Host "" >> "%PS_SCRIPT%"
echo Write-Host "Selected: $($selectedConnection.Name^) - $($selectedConnection.Subnet^)" -ForegroundColor Green >> "%PS_SCRIPT%"
echo Write-Host "" >> "%PS_SCRIPT%"
echo. >> "%PS_SCRIPT%"
echo # Ask about exit node >> "%PS_SCRIPT%"
echo $exitNode = $false >> "%PS_SCRIPT%"
echo $exitNodeResponse = Read-Host "Do you want to advertise this machine as an exit node? (y/n^)" >> "%PS_SCRIPT%"
echo if ($exitNodeResponse -match '^[yY]'^) { >> "%PS_SCRIPT%"
echo     $exitNode = $true >> "%PS_SCRIPT%"
echo     Write-Host "This machine will be advertised as an exit node." -ForegroundColor Yellow >> "%PS_SCRIPT%"
echo } >> "%PS_SCRIPT%"
echo. >> "%PS_SCRIPT%"
echo # Ask about auth key >> "%PS_SCRIPT%"
echo $useAuthKey = $false >> "%PS_SCRIPT%"
echo $authKey = "" >> "%PS_SCRIPT%"
echo $authKeyResponse = Read-Host "Do you want to use an auth key? (y/n^)" >> "%PS_SCRIPT%"
echo if ($authKeyResponse -match '^[yY]'^) { >> "%PS_SCRIPT%"
echo     $useAuthKey = $true >> "%PS_SCRIPT%"
echo     $authKey = Read-Host "Enter your Tailscale auth key" >> "%PS_SCRIPT%"
echo     Write-Host "Auth key will be used for authentication." -ForegroundColor Yellow >> "%PS_SCRIPT%"
echo } >> "%PS_SCRIPT%"
echo. >> "%PS_SCRIPT%"
echo # Confirm before proceeding >> "%PS_SCRIPT%"
echo Write-Host "" >> "%PS_SCRIPT%"
echo Write-Host "Ready to advertise the following route to your Tailscale tailnet:" -ForegroundColor Cyan >> "%PS_SCRIPT%"
echo Write-Host "  - Network: $($selectedConnection.Subnet^)" >> "%PS_SCRIPT%"
echo if ($exitNode^) { >> "%PS_SCRIPT%"
echo     Write-Host "  - This machine will be advertised as an exit node" >> "%PS_SCRIPT%"
echo } >> "%PS_SCRIPT%"
echo Write-Host "" >> "%PS_SCRIPT%"
echo $confirmResponse = Read-Host "Proceed? (y/n^)" >> "%PS_SCRIPT%"
echo. >> "%PS_SCRIPT%"
echo if ($confirmResponse -notmatch '^[yY]'^) { >> "%PS_SCRIPT%"
echo     Write-Host "Operation cancelled by user." -ForegroundColor Yellow >> "%PS_SCRIPT%"
echo     exit >> "%PS_SCRIPT%"
echo } >> "%PS_SCRIPT%"
echo. >> "%PS_SCRIPT%"
echo # Execute the Tailscale command >> "%PS_SCRIPT%"
echo Write-Host "" >> "%PS_SCRIPT%"
echo Write-Host "Configuring Tailscale..." -ForegroundColor Blue >> "%PS_SCRIPT%"
echo. >> "%PS_SCRIPT%"
echo try { >> "%PS_SCRIPT%"
echo     # Verify Tailscale is running >> "%PS_SCRIPT%"
echo     try { >> "%PS_SCRIPT%"
echo         $tailscaleStatus = tailscale status >> "%PS_SCRIPT%"
echo         Write-Host "Tailscale is running." -ForegroundColor Green >> "%PS_SCRIPT%"
echo     } >> "%PS_SCRIPT%"
echo     catch { >> "%PS_SCRIPT%"
echo         Write-Host "Warning: Could not verify Tailscale status. Continuing anyway..." -ForegroundColor Yellow >> "%PS_SCRIPT%"
echo         Write-Host "Error details: $_" -ForegroundColor Gray >> "%PS_SCRIPT%"
echo     } >> "%PS_SCRIPT%"
echo     >> "%PS_SCRIPT%"
echo     # Build the command based on user selections >> "%PS_SCRIPT%"
echo     $command = "tailscale up" >> "%PS_SCRIPT%"
echo     >> "%PS_SCRIPT%"
echo     # Add route advertisement >> "%PS_SCRIPT%"
echo     $command += " --advertise-routes=$($selectedConnection.Subnet^)" >> "%PS_SCRIPT%"
echo     >> "%PS_SCRIPT%"
echo     # Add exit node if selected >> "%PS_SCRIPT%"
echo     if ($exitNode^) { >> "%PS_SCRIPT%"
echo         $command += " --advertise-exit-node" >> "%PS_SCRIPT%"
echo     } >> "%PS_SCRIPT%"
echo     >> "%PS_SCRIPT%"
echo     # Add auth key if provided >> "%PS_SCRIPT%"
echo     if ($useAuthKey -and -not [string]::IsNullOrWhiteSpace($authKey^)^) { >> "%PS_SCRIPT%"
echo         $command += " --authkey=********" # Mask the actual key in the displayed command >> "%PS_SCRIPT%"
echo     } >> "%PS_SCRIPT%"
echo     >> "%PS_SCRIPT%"
echo     # Execute the command >> "%PS_SCRIPT%"
echo     Write-Host "Executing: $command" -ForegroundColor Gray >> "%PS_SCRIPT%"
echo     >> "%PS_SCRIPT%"
echo     # Use Start-Process for better error capture >> "%PS_SCRIPT%"
echo     $tempFile = [System.IO.Path]::GetTempFileName(^) >> "%PS_SCRIPT%"
echo     >> "%PS_SCRIPT%"
echo     # Build argument list properly >> "%PS_SCRIPT%"
echo     $argList = @("up", "--advertise-routes=$($selectedConnection.Subnet^)"^) >> "%PS_SCRIPT%"
echo     if ($exitNode^) { >> "%PS_SCRIPT%"
echo         $argList += "--advertise-exit-node" >> "%PS_SCRIPT%"
echo     } >> "%PS_SCRIPT%"
echo     if ($useAuthKey -and -not [string]::IsNullOrWhiteSpace($authKey^)^) { >> "%PS_SCRIPT%"
echo         $argList += "--authkey=$authKey" >> "%PS_SCRIPT%"
echo     } >> "%PS_SCRIPT%"
echo     >> "%PS_SCRIPT%"
echo     $process = Start-Process -FilePath "tailscale" -ArgumentList $argList -NoNewWindow -Wait -PassThru -RedirectStandardOutput $tempFile -RedirectStandardError "$tempFile.err" >> "%PS_SCRIPT%"
echo     $output = Get-Content -Path $tempFile -Raw >> "%PS_SCRIPT%"
echo     $errorOutput = Get-Content -Path "$tempFile.err" -Raw -ErrorAction SilentlyContinue >> "%PS_SCRIPT%"
echo     >> "%PS_SCRIPT%"
echo     # Display the output >> "%PS_SCRIPT%"
echo     if (-not [string]::IsNullOrWhiteSpace($output^)^) { >> "%PS_SCRIPT%"
echo         Write-Host "Command output:" -ForegroundColor Gray >> "%PS_SCRIPT%"
echo         Write-Host $output >> "%PS_SCRIPT%"
echo     } >> "%PS_SCRIPT%"
echo     >> "%PS_SCRIPT%"
echo     # Display any error output >> "%PS_SCRIPT%"
echo     if (-not [string]::IsNullOrWhiteSpace($errorOutput^)^) { >> "%PS_SCRIPT%"
echo         Write-Host "Error output:" -ForegroundColor Red >> "%PS_SCRIPT%"
echo         Write-Host $errorOutput >> "%PS_SCRIPT%"
echo     } >> "%PS_SCRIPT%"
echo     >> "%PS_SCRIPT%"
echo     # Check if successful >> "%PS_SCRIPT%"
echo     if ($process.ExitCode -eq 0^) { >> "%PS_SCRIPT%"
echo         Write-Host "Success! Route $($selectedConnection.Subnet^) has been advertised to your tailnet." -ForegroundColor Green >> "%PS_SCRIPT%"
echo         >> "%PS_SCRIPT%"
echo         # Add note about approval if needed >> "%PS_SCRIPT%"
echo         if ($output -match "approval" -or $errorOutput -match "approval"^) { >> "%PS_SCRIPT%"
echo             Write-Host "Note: The route is waiting for approval from your tailnet admin." -ForegroundColor Yellow >> "%PS_SCRIPT%"
echo         } >> "%PS_SCRIPT%"
echo     } >> "%PS_SCRIPT%"
echo     else { >> "%PS_SCRIPT%"
echo         Write-Host "Error: Tailscale command failed with exit code $($process.ExitCode^)" -ForegroundColor Red >> "%PS_SCRIPT%"
echo         >> "%PS_SCRIPT%"
echo         # Provide troubleshooting guidance >> "%PS_SCRIPT%"
echo         Write-Host "" >> "%PS_SCRIPT%"
echo         Write-Host "Troubleshooting tips:" -ForegroundColor Yellow >> "%PS_SCRIPT%"
echo         Write-Host "1. Make sure you're logged into Tailscale (run 'tailscale status' to check^)" -ForegroundColor Yellow >> "%PS_SCRIPT%"
echo         Write-Host "2. Verify that your Tailscale account has permissions to advertise routes" -ForegroundColor Yellow >> "%PS_SCRIPT%"
echo         Write-Host "3. Check if your tailnet has subnet routing enabled in the admin console" -ForegroundColor Yellow >> "%PS_SCRIPT%"
echo         Write-Host "4. Try running the command manually: $command" -ForegroundColor Yellow >> "%PS_SCRIPT%"
echo     } >> "%PS_SCRIPT%"
echo     >> "%PS_SCRIPT%"
echo     # Clean up temp files >> "%PS_SCRIPT%"
echo     Remove-Item -Path $tempFile -Force -ErrorAction SilentlyContinue >> "%PS_SCRIPT%"
echo     Remove-Item -Path "$tempFile.err" -Force -ErrorAction SilentlyContinue >> "%PS_SCRIPT%"
echo } >> "%PS_SCRIPT%"
echo catch { >> "%PS_SCRIPT%"
echo     Write-Host "Error executing Tailscale command: $_" -ForegroundColor Red >> "%PS_SCRIPT%"
echo     Write-Host "Stack trace: $($_.ScriptStackTrace^)" -ForegroundColor Gray >> "%PS_SCRIPT%"
echo } >> "%PS_SCRIPT%"
echo. >> "%PS_SCRIPT%"
echo Write-Host "" >> "%PS_SCRIPT%"
echo Write-Host "Press any key to exit..." >> "%PS_SCRIPT%"
echo $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown"^) >> "%PS_SCRIPT%"

:: Run the PowerShell script
echo Running Tailscale Route Advertiser...
powershell -ExecutionPolicy Bypass -File "%PS_SCRIPT%"

:: Clean up
echo Cleaning up temporary files...
rmdir /s /q "%TEMP_DIR%" >nul 2>&1

echo Done.
exit /b
